const express = require('express');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Basic middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files from public directory
app.use(express.static(path.join(__dirname, 'public')));

// Health check endpoint - critical for Railway
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'Briggs Empire',
    version: '1.0.0'
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API status endpoint
app.get('/api/status', (req, res) => {
  res.json({
    message: 'Briggs Empire API is running',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    database: process.env.DATABASE_URL ? 'connected' : 'not configured',
    ai_providers: {
      openai: process.env.OPENAI_API_KEY ? 'configured' : 'not configured',
      claude: process.env.CLAUDE_API_KEY ? 'configured' : 'not configured',
      gemini: process.env.GEMINI_API_KEY ? 'configured' : 'not configured'
    }
  });
});

// Simple API endpoints
app.get('/api/books', (req, res) => {
  res.json({
    books: [],
    total: 0,
    message: 'Book database integration coming soon'
  });
});

app.post('/api/books', (req, res) => {
  const { title, genre, description } = req.body;
  res.json({
    message: 'Book creation endpoint ready',
    book: {
      id: Date.now().toString(),
      title: title || 'Untitled',
      genre: genre || 'General',
      description: description || 'No description',
      status: 'pending',
      created_at: new Date().toISOString()
    }
  });
});

// AI Worker endpoints
app.get('/api/workers', (req, res) => {
  res.json({
    workers: [
      { id: 1, name: 'Content Generator', status: 'idle', provider: 'openai' },
      { id: 2, name: 'Quality Checker', status: 'idle', provider: 'claude' },
      { id: 3, name: 'Style Enhancer', status: 'idle', provider: 'gemini' }
    ],
    total_workers: 3,
    active_workers: 0
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: 'Not found',
    message: `Cannot ${req.method} ${req.path}`
  });
});

// Start server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🏰 Briggs Empire server running on port ${PORT}`);
  console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`🚀 Ready to receive requests!`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  process.exit(0);
});
